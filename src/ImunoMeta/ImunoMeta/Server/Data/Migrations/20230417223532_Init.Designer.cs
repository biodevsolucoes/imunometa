// <auto-generated />
using System;
using ImunoMeta.Server.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ImunoMeta.Server.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230417223532_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Contato", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DataCadastroUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<Guid>("UsuarioContatoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioContatoId1")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId1")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioContatoId1");

                    b.HasIndex("UsuarioId1");

                    b.ToTable("Contato");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Denuncia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DataCadastroUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("UrlDenunciada")
                        .HasColumnType("varchar(500)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId1")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId1");

                    b.ToTable("Denuncia");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Mensagem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DataCadastroUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<Guid>("UsuarioDestinoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioDestinoId1")
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId1")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioDestinoId1");

                    b.HasIndex("UsuarioId1");

                    b.ToTable("Mensagem");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Noticia", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DataCadastroUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("Resumo")
                        .IsRequired()
                        .HasColumnType("varchar(1000)");

                    b.Property<string>("Texto")
                        .IsRequired()
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<string>("UrlImagemCapa")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Noticia");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f77a0058-fd20-48df-b85f-ac875da252fe"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Removido = false,
                            Resumo = "Nesta etapa, poderão receber o imunizante profissionais de saúde, trabalhadores do sistema prisional, pessoas com deficiência e população privada de liberdade",
                            Texto = "A Secretaria de Saúde do Distrito Federal inicia nesta quarta-feira (22) a imunização de profissionais de saúde, trabalhadores prisionais, população privada de liberdade e pessoas com deficiência permanente com a versão bivalente da vacina contra a covid-19. O imunizante estará disponível em mais de 90 locais com atendimento das 8h às 17h.",
                            Titulo = "DF inicia vacinação bivalente contra a covid-19 para novos grupos",
                            UrlImagemCapa = "https://www.saude.df.gov.br/image/journal/article?img_id=3019334"
                        },
                        new
                        {
                            Id = new Guid("6c2a6bb4-0439-4795-afa6-57fe8de1fb1e"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Removido = false,
                            Resumo = "Secretaria nomeia novos profissionais e abre leitos de UTI e de enfermaria pediátrica, além de capacitar equipes para atender ao público infantil",
                            Texto = "A chegada do outono e do inverno nos meses de março a junho ocasiona a propagação de vírus que causam doenças respiratórias, majoritariamente, entre as crianças – em especial naquelas de até dois anos de idade, cujo sistema imunológico não é tão fortalecido.",
                            Titulo = "Saúde reforça serviços de atendimento às crianças",
                            UrlImagemCapa = "https://www.saude.df.gov.br/image/journal/article?img_id=3019298"
                        },
                        new
                        {
                            Id = new Guid("1bf99edf-a37e-4665-9194-3c1dd51ee531"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Removido = false,
                            Resumo = "Palestra em unidade de saúde de Sobradinho busca tornar o atendimento a vítimas mais empático e aprofundar temas sensíveis, como traumas e agressões sexuais",
                            Texto = "Atendimento ainda mais empático. Esse foi um dos objetivos da palestra Violência sexual e compreensão das reações das vítimas realizada nessa segunda-feira (20), no Hospital Regional de Sobradinho (HRS). A iniciativa visa capacitar a rede que atua no acolhimento de casos de violência, incluindo profissionais da saúde e servidores da rede-adjunta, como educação, órgãos da justiça e conselhos tutelares.",
                            Titulo = "Hospital capacita servidores para acolher pessoas em situação de violência",
                            UrlImagemCapa = "https://www.saude.df.gov.br/image/journal/article?img_id=3019264"
                        });
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.PontoVacinacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Cidade")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DataCadastroUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(250)");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasColumnType("varchar(2)");

                    b.Property<Guid?>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId1")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId1");

                    b.ToTable("PontoVacinacao");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ce37bb4-e0d9-4d5f-bc24-c2c53adba423"),
                            Cidade = "Brasília",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "QI 3",
                            Latitude = -15.725453043781098,
                            Longitude = -47.873853836999871,
                            Nome = "UBS 1 Lago Norte",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("779305b6-3537-4aa3-8bf1-ed9e72c8e982"),
                            Cidade = "Brasília",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Vila Varjão Quadra 5 Conjunto A Lote 17",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 1 Varjão",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("eaee9b78-96e2-4683-a46b-0dc95325db8b"),
                            Cidade = "Brasília",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "SGAN 905",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 1 Asa Norte",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("848c5c1b-35c8-48c2-bc5e-093b2a45112b"),
                            Cidade = "Brasília",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "EQN 114/115",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 2 Asa Norte",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("2dcc459a-67ed-4e4b-b85f-d43baa060cbe"),
                            Cidade = "Brasília",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rua Piau – Acampamento Pacheco",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 3 Vila Planalto",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("abd252da-d7b2-468a-9890-f9e1210ed263"),
                            Cidade = "Brasília",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "QS 514/515 – W3 Sul ",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "Policlínica 514 Sul",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("9637a93b-5bf7-4f3c-8a30-fbda392ad6bb"),
                            Cidade = "Brasília",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "SHCES 601 - Lote 01 - Cruzeiro Novo",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 1 Cruzeiro",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("a39f72e6-adff-4ba8-a81a-b67fe686e25a"),
                            Cidade = "Brasília",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Setor Escolar Lote 04 - Cruzeiro Velho",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 2 Cruzeiro",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("5cb64c4c-d31f-4713-9e0d-d4b6973ac9db"),
                            Cidade = "Brasília",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "SHIS QI 21 – Área Especial/23 – AE LT E – Lago Sul",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "Policlínica do Lago Sul",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("6e1a720e-c8c1-4f59-965f-f54fa1e64b03"),
                            Cidade = "Sobradinho",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Quadra 14 Área Especial 22/23",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 1 Sobradinho",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("b097ea92-ac65-425d-b6fa-0940e907dbdb"),
                            Cidade = "Sobradinho",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Quadra 3 Área Especial Conjuntos D/E",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 2 Sobradinho",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("d86ff3f2-5053-48e7-b849-ddc4d7e7bbea"),
                            Cidade = "Sobradinho",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Área Especial – Novo Setor de Mansões Nova Colina",
                            Latitude = -47.75527347168611,
                            Longitude = -15.64796549335305,
                            Nome = "UBS 3 Sobradinho – Nova Colina",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("d39c1020-b256-40db-bbb5-0cdc4454f7b7"),
                            Cidade = "Sobradinho",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Área Especial 01, Lote 01, Associação de Moradores, Vila BASEVI",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 5 Sobradinho - Basevi",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("a8ed3cb5-9acf-48e2-ba3a-130b702a896b"),
                            Cidade = "Sobradinho",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "DF 001 KM 120 Rua 08 Chácara 187 Lago Oeste, Sobradinho",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 6 Sobradinho - Lago Oeste",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("d9e163c5-0ab4-4ea0-958d-37df15287253"),
                            Cidade = "Sobradinho",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Rodovia DF 420, Complexo de Saúde, Setor de Mansões, ao lado da UPA Sobradinho",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 1 Sobradinho II",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("d5ef630b-6c15-4607-a206-2181296d30cc"),
                            Cidade = "Sobradinho",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Condomínio Vale dos Pinheiros, Quadra 45 A, Conjunto A, Lote 56, Sobradinho II",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 3 Sobradinho II",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("8596da97-bfe3-4957-b38d-bf61657bb7d1"),
                            Cidade = "Sobradinho",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Condomínio Mini-Chácaras, QMS 16 Rua 14 Casa 01 – Sobradinho II",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 5 Sobradinho II",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("b0e84dca-dbac-4c10-aae1-06b3ada858ed"),
                            Cidade = "Sobradinho",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Condomínio Vale das Acácias, Quadra 12, Lote 01, Sobradinho II",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 6 Sobradinho II",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("fe44f672-00db-484c-922d-d7a51b457129"),
                            Cidade = "Sobradinho",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "Quadra 5, Área Especial A, nº 1. Vila Buritizinho",
                            Latitude = -47.828150520004122,
                            Longitude = -15.65127289695881,
                            Nome = "UBS 7 Sobradinho II – Vila Buritizinho",
                            Removido = false,
                            UF = "DF"
                        },
                        new
                        {
                            Id = new Guid("df89252b-fceb-4040-ae9f-b54ac033645a"),
                            Cidade = "Sobradinho",
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Endereco = "DF 150 Km 12 Quadra 10 Casa 14 ",
                            Latitude = 0.0,
                            Longitude = 0.0,
                            Nome = "UBS 1 Fercal",
                            Removido = false,
                            UF = "DF"
                        });
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Pontuacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DataCadastroUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<Guid>("TipoPontuacaoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId1")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TipoPontuacaoId");

                    b.HasIndex("UsuarioId1");

                    b.ToTable("Pontuacao");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.TipoPontuacao", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DataCadastroUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<short>("Valor")
                        .HasColumnType("smallint");

                    b.HasKey("Id");

                    b.ToTable("TipoPontuacao");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2fec7f33-2126-4d97-b8af-072ea89fb60e"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Denuncia",
                            Removido = false,
                            Valor = (short)50
                        },
                        new
                        {
                            Id = new Guid("8c3ea3b9-0b97-4bce-8e40-ba060e00c877"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Compartilhar",
                            Removido = false,
                            Valor = (short)25
                        },
                        new
                        {
                            Id = new Guid("ed2a1a55-b8e5-4390-8815-4e2e332c2d8c"),
                            DataCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataCadastroUTC = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Descricao = "Vacinas",
                            Removido = false,
                            Valor = (short)10
                        });
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Trofeu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DataCadastroUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ImagemUrl")
                        .IsRequired()
                        .HasColumnType("varchar(500)");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.HasKey("Id");

                    b.ToTable("Trofeu");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Usuario", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UrlFoto")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.UsuarioTrofeu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DataCadastroUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<Guid>("TrofeuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId1")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("TrofeuId");

                    b.HasIndex("UsuarioId1");

                    b.ToTable("UsuarioTrofeu");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.UsuarioVacina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DataCadastroUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UsuarioId1")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<Guid>("VacinaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId1");

                    b.HasIndex("VacinaId");

                    b.ToTable("UsuarioVacina");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Vacina", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DataCadastro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getdate()");

                    b.Property<DateTime>("DataCadastroUTC")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("getutcdate()");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("Removido")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Vacina");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Contato", b =>
                {
                    b.HasOne("ImunoMeta.Shared.Models.Usuario", "UsuarioContato")
                        .WithMany()
                        .HasForeignKey("UsuarioContatoId1");

                    b.HasOne("ImunoMeta.Shared.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId1");

                    b.Navigation("Usuario");

                    b.Navigation("UsuarioContato");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Denuncia", b =>
                {
                    b.HasOne("ImunoMeta.Shared.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId1");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Mensagem", b =>
                {
                    b.HasOne("ImunoMeta.Shared.Models.Usuario", "UsuarioDestino")
                        .WithMany()
                        .HasForeignKey("UsuarioDestinoId1");

                    b.HasOne("ImunoMeta.Shared.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId1");

                    b.Navigation("Usuario");

                    b.Navigation("UsuarioDestino");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.PontoVacinacao", b =>
                {
                    b.HasOne("ImunoMeta.Shared.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId1");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Pontuacao", b =>
                {
                    b.HasOne("ImunoMeta.Shared.Models.TipoPontuacao", "TipoPontuacao")
                        .WithMany()
                        .HasForeignKey("TipoPontuacaoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImunoMeta.Shared.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId1");

                    b.Navigation("TipoPontuacao");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.UsuarioTrofeu", b =>
                {
                    b.HasOne("ImunoMeta.Shared.Models.Trofeu", "Trofeu")
                        .WithMany()
                        .HasForeignKey("TrofeuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImunoMeta.Shared.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trofeu");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.UsuarioVacina", b =>
                {
                    b.HasOne("ImunoMeta.Shared.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImunoMeta.Shared.Models.Vacina", "Vacina")
                        .WithMany()
                        .HasForeignKey("VacinaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");

                    b.Navigation("Vacina");
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Vacina", b =>
                {
                    b.HasOne("ImunoMeta.Shared.Models.Usuario", null)
                        .WithMany("Vacinas")
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ImunoMeta.Shared.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ImunoMeta.Shared.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ImunoMeta.Shared.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ImunoMeta.Shared.Models.Usuario", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ImunoMeta.Shared.Models.Usuario", b =>
                {
                    b.Navigation("Vacinas");
                });
#pragma warning restore 612, 618
        }
    }
}
